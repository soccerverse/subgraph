# GraphQL schema for all the data we collect from the Soccerverse
# smart contracts (excluding Democrit which has its own subgraph).

################################################################################
# Referral leaderboard

# A user that has referred others.
type Referrer @entity {
  # The ID is the Xaya account name as Bytes.
  id: Bytes!
  account: String!
  referrals: [Referral!]! @derivedFrom (field: "referrer")
  bonuses: [ReferrerBonus!]! @derivedFrom (field: "referrer")
  totals: [ReferrerTotal!]!  @derivedFrom (field: "referrer")
  # The current (last) ReferrerTotal for this referrer.
  currentTotal: ReferrerTotal!
}

# Each user that a referrer has referred is tracked here.
type Referral @entity (immutable: true) {
  # The ID is the Xaya account name as Bytes.
  id: Bytes!
  account: String!
  referrer: Referrer!
  timestamp: BigInt!
}

# A referral bonus given.
type ReferrerBonus @entity (immutable: true) {
  # The ID is constructed from txid and log index and just a unique ID.
  id: Bytes!
  referrer: Referrer!
  referral: Referral!
  timestamp: BigInt!
  clubId: BigInt!
  packsBought: BigInt!
  usdSpent: BigInt!
  bonusShares: BigInt!
}

# Running totals for referral stats.  Whenever they change (such as new referral
# or referral overwritten, or bonus received), we add a new entry here with
# updated totals.  From this, stats for some time range can be derived
# by subtracting the totals.
type ReferrerTotal @entity (immutable: true) {
  # The ID is constructed from account name and a running counter for how many
  # totals we already have for this account.
  id: Bytes!
  referrer: Referrer!
  timestamp: BigInt!
  # How many preceding totals there already are for this referrer.
  index: BigInt!
  referrals: BigInt!
  bonusShares: BigInt!
  # Total USD spent by referrals.
  usdSpent: BigInt!
}

################################################################################
# Shop and pack-sale stuff

# A tier (individual sales contract) in the pack sale.
type SaleTier @entity {
  # The ID is the contract address (as Bytes).
  id: Bytes!
  name: String!
  # True if the sale is active, i.e. not paused.
  active: Boolean!
  clubs: [SaleClub!]! @derivedFrom (field: "tier")
  pausedClubs: [SaleClub!]! @derivedFrom (field: "pausedInTier")
  pricingSteps: [PricingStep!]! @derivedFrom (field: "tier")
}

# A pricing step for a sale tier.
type PricingStep @entity (immutable: true) {
  # The ID is the tier ID / address and the step index added.
  id: Bytes!
  tier: SaleTier!
  index: Int!
  # Number of shares available at this price.
  numShares: Int!
  # Price of one share in this batch.
  price: BigInt!
  # Minimum number of shares minted before this is in effect.
  fromTotal: Int!
  # Maximum number of shares minted when this is still in effect.
  toTotal: Int!
}

# A club in the sale.
type SaleClub @entity {
  # The ID is the club ID as integer converted to bytes.
  id: Bytes!
  clubId: Int!
  # The SaleTier this is part of, if the club is actively sold.
  tier: SaleTier
  # The SaleTier this is part of as a paused club.
  pausedInTier: SaleTier
  # Total number of shares minted in the club so far.
  minted: Int!
}
